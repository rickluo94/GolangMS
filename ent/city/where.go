// Code generated by ent, DO NOT EDIT.

package city

import (
	"awesomeProject/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "Name" field. It's identical to NameEQ.
func Name(v string) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// CountryCode applies equality check predicate on the "CountryCode" field. It's identical to CountryCodeEQ.
func CountryCode(v string) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCountryCode), v))
	})
}

// District applies equality check predicate on the "District" field. It's identical to DistrictEQ.
func District(v string) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDistrict), v))
	})
}

// Population applies equality check predicate on the "Population" field. It's identical to PopulationEQ.
func Population(v int) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPopulation), v))
	})
}

// NameEQ applies the EQ predicate on the "Name" field.
func NameEQ(v string) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "Name" field.
func NameNEQ(v string) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "Name" field.
func NameIn(vs ...string) predicate.City {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "Name" field.
func NameNotIn(vs ...string) predicate.City {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "Name" field.
func NameGT(v string) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "Name" field.
func NameGTE(v string) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "Name" field.
func NameLT(v string) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "Name" field.
func NameLTE(v string) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "Name" field.
func NameContains(v string) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "Name" field.
func NameHasPrefix(v string) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "Name" field.
func NameHasSuffix(v string) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameIsNil applies the IsNil predicate on the "Name" field.
func NameIsNil() predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldName)))
	})
}

// NameNotNil applies the NotNil predicate on the "Name" field.
func NameNotNil() predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldName)))
	})
}

// NameEqualFold applies the EqualFold predicate on the "Name" field.
func NameEqualFold(v string) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "Name" field.
func NameContainsFold(v string) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// CountryCodeEQ applies the EQ predicate on the "CountryCode" field.
func CountryCodeEQ(v string) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCountryCode), v))
	})
}

// CountryCodeNEQ applies the NEQ predicate on the "CountryCode" field.
func CountryCodeNEQ(v string) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCountryCode), v))
	})
}

// CountryCodeIn applies the In predicate on the "CountryCode" field.
func CountryCodeIn(vs ...string) predicate.City {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCountryCode), v...))
	})
}

// CountryCodeNotIn applies the NotIn predicate on the "CountryCode" field.
func CountryCodeNotIn(vs ...string) predicate.City {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCountryCode), v...))
	})
}

// CountryCodeGT applies the GT predicate on the "CountryCode" field.
func CountryCodeGT(v string) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCountryCode), v))
	})
}

// CountryCodeGTE applies the GTE predicate on the "CountryCode" field.
func CountryCodeGTE(v string) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCountryCode), v))
	})
}

// CountryCodeLT applies the LT predicate on the "CountryCode" field.
func CountryCodeLT(v string) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCountryCode), v))
	})
}

// CountryCodeLTE applies the LTE predicate on the "CountryCode" field.
func CountryCodeLTE(v string) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCountryCode), v))
	})
}

// CountryCodeContains applies the Contains predicate on the "CountryCode" field.
func CountryCodeContains(v string) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCountryCode), v))
	})
}

// CountryCodeHasPrefix applies the HasPrefix predicate on the "CountryCode" field.
func CountryCodeHasPrefix(v string) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCountryCode), v))
	})
}

// CountryCodeHasSuffix applies the HasSuffix predicate on the "CountryCode" field.
func CountryCodeHasSuffix(v string) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCountryCode), v))
	})
}

// CountryCodeIsNil applies the IsNil predicate on the "CountryCode" field.
func CountryCodeIsNil() predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCountryCode)))
	})
}

// CountryCodeNotNil applies the NotNil predicate on the "CountryCode" field.
func CountryCodeNotNil() predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCountryCode)))
	})
}

// CountryCodeEqualFold applies the EqualFold predicate on the "CountryCode" field.
func CountryCodeEqualFold(v string) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCountryCode), v))
	})
}

// CountryCodeContainsFold applies the ContainsFold predicate on the "CountryCode" field.
func CountryCodeContainsFold(v string) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCountryCode), v))
	})
}

// DistrictEQ applies the EQ predicate on the "District" field.
func DistrictEQ(v string) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDistrict), v))
	})
}

// DistrictNEQ applies the NEQ predicate on the "District" field.
func DistrictNEQ(v string) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDistrict), v))
	})
}

// DistrictIn applies the In predicate on the "District" field.
func DistrictIn(vs ...string) predicate.City {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDistrict), v...))
	})
}

// DistrictNotIn applies the NotIn predicate on the "District" field.
func DistrictNotIn(vs ...string) predicate.City {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDistrict), v...))
	})
}

// DistrictGT applies the GT predicate on the "District" field.
func DistrictGT(v string) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDistrict), v))
	})
}

// DistrictGTE applies the GTE predicate on the "District" field.
func DistrictGTE(v string) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDistrict), v))
	})
}

// DistrictLT applies the LT predicate on the "District" field.
func DistrictLT(v string) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDistrict), v))
	})
}

// DistrictLTE applies the LTE predicate on the "District" field.
func DistrictLTE(v string) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDistrict), v))
	})
}

// DistrictContains applies the Contains predicate on the "District" field.
func DistrictContains(v string) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDistrict), v))
	})
}

// DistrictHasPrefix applies the HasPrefix predicate on the "District" field.
func DistrictHasPrefix(v string) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDistrict), v))
	})
}

// DistrictHasSuffix applies the HasSuffix predicate on the "District" field.
func DistrictHasSuffix(v string) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDistrict), v))
	})
}

// DistrictIsNil applies the IsNil predicate on the "District" field.
func DistrictIsNil() predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDistrict)))
	})
}

// DistrictNotNil applies the NotNil predicate on the "District" field.
func DistrictNotNil() predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDistrict)))
	})
}

// DistrictEqualFold applies the EqualFold predicate on the "District" field.
func DistrictEqualFold(v string) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDistrict), v))
	})
}

// DistrictContainsFold applies the ContainsFold predicate on the "District" field.
func DistrictContainsFold(v string) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDistrict), v))
	})
}

// PopulationEQ applies the EQ predicate on the "Population" field.
func PopulationEQ(v int) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPopulation), v))
	})
}

// PopulationNEQ applies the NEQ predicate on the "Population" field.
func PopulationNEQ(v int) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPopulation), v))
	})
}

// PopulationIn applies the In predicate on the "Population" field.
func PopulationIn(vs ...int) predicate.City {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPopulation), v...))
	})
}

// PopulationNotIn applies the NotIn predicate on the "Population" field.
func PopulationNotIn(vs ...int) predicate.City {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPopulation), v...))
	})
}

// PopulationGT applies the GT predicate on the "Population" field.
func PopulationGT(v int) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPopulation), v))
	})
}

// PopulationGTE applies the GTE predicate on the "Population" field.
func PopulationGTE(v int) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPopulation), v))
	})
}

// PopulationLT applies the LT predicate on the "Population" field.
func PopulationLT(v int) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPopulation), v))
	})
}

// PopulationLTE applies the LTE predicate on the "Population" field.
func PopulationLTE(v int) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPopulation), v))
	})
}

// PopulationIsNil applies the IsNil predicate on the "Population" field.
func PopulationIsNil() predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPopulation)))
	})
}

// PopulationNotNil applies the NotNil predicate on the "Population" field.
func PopulationNotNil() predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPopulation)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.City) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.City) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.City) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		p(s.Not())
	})
}
