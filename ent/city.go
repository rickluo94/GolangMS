// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awesomeProject/ent/city"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// City is the model entity for the City schema.
type City struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// CountryCode holds the value of the "CountryCode" field.
	CountryCode string `json:"CountryCode,omitempty"`
	// District holds the value of the "District" field.
	District string `json:"District,omitempty"`
	// Population holds the value of the "Population" field.
	Population int `json:"Population,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*City) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case city.FieldID, city.FieldPopulation:
			values[i] = new(sql.NullInt64)
		case city.FieldName, city.FieldCountryCode, city.FieldDistrict:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type City", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the City fields.
func (c *City) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case city.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case city.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case city.FieldCountryCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CountryCode", values[i])
			} else if value.Valid {
				c.CountryCode = value.String
			}
		case city.FieldDistrict:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field District", values[i])
			} else if value.Valid {
				c.District = value.String
			}
		case city.FieldPopulation:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Population", values[i])
			} else if value.Valid {
				c.Population = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this City.
// Note that you need to call City.Unwrap() before calling this method if this City
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *City) Update() *CityUpdateOne {
	return (&CityClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the City entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *City) Unwrap() *City {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: City is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *City) String() string {
	var builder strings.Builder
	builder.WriteString("City(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("Name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("CountryCode=")
	builder.WriteString(c.CountryCode)
	builder.WriteString(", ")
	builder.WriteString("District=")
	builder.WriteString(c.District)
	builder.WriteString(", ")
	builder.WriteString("Population=")
	builder.WriteString(fmt.Sprintf("%v", c.Population))
	builder.WriteByte(')')
	return builder.String()
}

// Cities is a parsable slice of City.
type Cities []*City

func (c Cities) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
